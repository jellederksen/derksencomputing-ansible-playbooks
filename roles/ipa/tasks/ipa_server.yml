---

- name: Ensure the ipa server packages are installed
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - freeipa-server
    - freeipa-server-dns
    - freeipa-server-common

- name: Ensure ipa server is installed and configured
  shell: "/usr/sbin/ipa-server-install --setup-dns --auto-reverse --unattended --no-forwarders --admin-password '{{ ipa_admin_pass }}' --ds-password '{{ ipa_ds_pass }}' --domain '{{ ipa_domain }}' --realm '{{ ipa_realm }}'"
  args:
    creates: /etc/ipa/default.conf
  no_log: True

- name: Ensure the default login shell is bash
  ipa_config:
    ipadefaultloginshell: /bin/bash
    ipa_host: vega.galaxy.derksencomputing.nl
    ipa_user: admin
    ipa_pass: "{{ ipa_admin_pass }}"

- name: Ensure nodes are enrolled
  ipa_host:
    name: "{{ hostvars[item]['ansible_fqdn'] }}"
    description: Node of derksencomputing.nl domain
    # TODO: algol and sirius have two interfaces. The wrong IP-adres is added to the DNS zone
    ip_address:  "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
    state: present
    ipa_host: vega.galaxy.derksencomputing.nl
    ipa_user: admin
    ipa_pass: "{{ ipa_admin_pass }}"
    validate_certs: False
  with_items:
    - "{{ groups['ipa_clients'] }}"
  # Ignore errors is set because when a node is down, that hosts Ansible setup
  # variables are not set "{{ hostvars[item]['ansible_fqdn'] }}" is undefined.
  # Because failed hosts are always included in this task, we set ignore_errors
  # to True so the playbook on the IPA-server will continue even if some hosts
  # are down.
  ignore_errors: True
  no_log: True

- name: Ensure IPA users exist
  ipa_user:
    name: "{{ item.name }}"
    state: present
    givenname: "{{ item.givenname }}"
    sn: "{{ item.sn }}"
    loginshell: "{{ item.loginshell }}"
    password: "{{ item.password }}"
    ipa_host: vega.galaxy.derksencomputing.nl
    ipa_user: admin
    ipa_pass: "{{ ipa_admin_pass }}"
    update_password: on_create
  with_items:
    - "{{ ipa_users }}"
  no_log: True

- name: Ensure sudo rules exists
  ipa_sudorule:
    name: allow_users_sudo
    cmdcategory: all
    description: Allow to run every command with sudo without password
    hostcategory: all
    sudoopt:
    - '!authenticate'
    #usercategory: all
    user:
      - jelle
    ipa_host: vega.galaxy.derksencomputing.nl
    ipa_user: admin
    ipa_pass: "{{ ipa_admin_pass }}"

- name: "Ensure kra server is intalled"
  shell: "/usr/sbin/ipa-kra-install --unattended --password '{{ ipa_ds_pass }}'"
  args:
    creates: /etc/sysconfig/pki/tomcat/pki-tomcat/kra/default.cfg
  no_log: true

- name: Ensure OpenBSD binddb check is set
  shell: "ldapsearch -D 'cn=Directory Manager' -x uid=openbsd -w '{{ ipa_ds_pass }}'"
  register: openbsd_ensure_binddn
  changed_when: False
  #no_log: True

- name: Ensure OpenBSD binddn users exists
  block:
    - name: Ensure OpenBSD ldap user LDIF file
      template:
        src: templates/RedHat/openbsd_ldap_binddn.ldif.j2
        dest: /root/openbsd_ldap_binddb.ldif
    - name: Ensure OpenBSD binddb ldif file is updated
      shell: ipa-ldap-updater /root/openbsd_ldap_binddb.ldif
  when: '"numEntries: 1" not in openbsd_ensure_binddn.stdout'

- name: "Check if automount map auto.home exists"
  shell: "{{ item }}"
  with_items:
    - "echo '{{ ipa_admin_pass }}' | /usr/bin/kinit admin"
    - /usr/bin/ipa automountmap-find default --map=auto.home
  register: autohome
  changed_when: False
  ignore_errors: yes
  no_log: True

#When the previous task failed to find the auto.home automount-map, we
#create it here. Otherwise we need to skip creating the automount for
#home directories, because it already has been created.
- name: "Ensure automout of home directies exists"
  shell: "{{ item }}"
  with_items:
    - "echo '{{ ipa_admin_pass }}' | /usr/bin/kinit admin"
    - "/usr/bin/ipa automountmap-add default auto.home"
    - "/usr/bin/ipa automountkey-add default --key '/home' --info auto.home auto.master"
    - "/usr/bin/ipa automountkey-add default --key '*' --info '-fstype=nfs4,rw,sec=krb5,soft,rsize=8192,wsize=8192 172.16.0.3:/home/&' auto.home"
  when: autohome['results'][1]['failed'] == True
  no_log: True
